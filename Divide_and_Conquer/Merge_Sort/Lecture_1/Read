

 --------------------------- Divide and Conquer ----------------------------

 Breaking a problem into sub-problems using recursion and then conquer them using MergeSort_Prerequisite.

 Merge sort and Quick sort are the examples of the divide and conquer.

 ---> Sort the below array using Divide and Conquer algo.
 { 7 , 3 , 2 , 15 , 7 , 1}

 ans = {1 , 2 , 3 , 7 , 7 , 15}

 Step-1 :   0   1   2   3    4   5
          { 7 , 3 , 2 , 15 , 7 , 1}

          Divide this array from the mid
          mid = 0+5/2 => 2

          (low , mid)   and  (mid +1 , high)

          { 7 , 3 , 2 , 15 , 7 , 1}
                    |
                   /  \
        {7 , 3 , 2}    {15 , 7 , 1}


 Step-2 :

 1.          { 7 , 3 , 2 , 15 , 7 , 1}
                       |
                     /    \
 2.      {7 , 3 , 2}        {15 , 7 , 1}
              |                   |
            /   \               /    \
 3.     {7,3}   {2}          {15,7}  {1}
          |                     |
        /   \                 /   \
 4.    7     3               15    7

     Now further division is not possible. Return 7 and 3 in the separate arrays.
     Single element is always sorted.

     at line - 4

     part1 = {7}
     part2 = {3}

     and return MergerTwoSortedArray(part1 , part2)

     at line - 3

     part1 = {3 , 7}
     part2 = {2}

     and return MergerTwoSortedArray(part1 , part2)


     at line - 2

     part1 = {2 , 3 , 7}
     part2 = {1 , 7 , 15}

     and return MergerTwoSortedArray(part1 , part2)


     By recursion both the arrays will be sorted and then we join the array.

     {1 , 2 , 3 , 7 , 7 , 15}

     ----> So, recursion is dividing the the array into sub-arrays and then we will
           join the sub-arrays using MergeTwoSortedArrays.





